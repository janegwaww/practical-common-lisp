#+options: toc:nil

* exercise-10

#+toc: headlines local

** If ~x~ is ~a~, ~y~ is ~b~, and ~z~ is ~(c d)~,...

1.If ~x~ is ~a~, ~y~ is ~b~, and ~z~ is ~(c d)~, write backquoted expressions containing only variables that yield each of the following:

1) ((C D) A Z)
   #+begin_src lisp
     `(,z ,x z)
   #+end_src
2) (X B C D)
   #+begin_src lisp
     `(x ,y ,@z)
   #+end_src
3) ((C D A) Z)
   #+begin_src lisp
     `((,@z ,x) z)
   #+end_src

** Define ~if~ in terms of ~cond~.

#+begin_src lisp
  (defun new-if (test then else)
    (cond (test then)
          (t else)))
#+end_src

#+RESULTS:
: NEW-IF

** Define a macro that takes...

3.Define a macro that takes a number n followed by one or more expressions, and returns the value of the nth expression:

#+begin_src lisp
  ;;> (let ((n 2))
  ;;     (nth-expr n (/ 1 0) (+ 1 2) (/ 1 0)))
  ;;===> 3
#+end_src

#+include: "../src/exercise-10-3.lisp" src lisp

** Define ~ntimes~ (page 167) to...

4.Define ~ntimes~ (page 167) to expand into a (local) recursive function instead of a ~do~.

#+include: "../src/exercise-10-4.lisp" src lisp

** Define a macro ~n-of~ that takes...

5.Define a macro ~n-of~ that takes a number ~n~ and an expression, and returns a list of ~n~ successive values returned by the expression:

#+include: "../src/exercise-10-5.lisp" src lisp

** TODO Define a macro that takes...

6.Define a macro that takes a list of variables and a body of code, and ensures that the variables revert to their original values after the body of code is evaluated.

#+include: "../src/exercise-10-5.lisp" src lisp

** What's wrong with the following definition of push?

#+begin_src lisp
  (defmacro push (obj lst)
    `(setf ,lst (cons ,obj ,lst)))
#+end_src

Give an example of a call where it would not do the same thing as the real push.

#+begin_src lisp
  (defmacro new-push (obj lst)
    (let ((o (gensym)))
      `(let ((,o ,obj))
         (setf ,lst (cons ,o ,lst)))))
#+end_src

#+RESULTS:
: NEW-PUSH

** Define a macro that doubles its argument:

#+begin_src quote
  > (let ((x 1)))
      (double x)
      x)
  2
#+end_src

#+begin_src lisp
  (defmacro double (x)
    (let ((n (gensym)))
      `(let ((,n ,x))
         (* ,n 2))))
#+end_src

#+RESULTS:
: DOUBLE
