#+options: toc:nil

* exercise-11

#+toc: headlines local

** Define accessors, initforms...

1.Define accessors, initforms, and initargs for the classes defined in Figure 11.2. Rewrite the associated code so that it no longer calls
~slot-value~.

#+include: "../src/exercise-11-1.lisp" src lisp

** Rewrite the code in...

2.Rewrite the code in Figure 9.5 so that spheres and points are classes, and ~intersect~ and normal are generic functions.([[file:section-9-8.org::*section-9-8 Example: Ray-Tracing][section-9-8 Example: Ray-Tracing]])

#+include: "../src/exercise-11-2.lisp" src lisp

** Suppose that a number of classes are defined as follows:

#+begin_src lisp
  (defclass a (c d) ...)
  (defclass b (d c) ...)
  (defclass c () ..)
  (defclass d (e f g) ...)

  (defclass e () ...)
  (defclass f (h) ...)
  (defclass g (h) ...)
  (defclass h () ...)
#+end_src

a.Draw the network representing the ancestors of ~a~, and list the classes an instance of a belongs to, from most to least specific.

b.Do the same for b.

[[file:exercise-11-3.org::*exercise-11-3][exercise-11-3]]

** Suppose that you already have the following functions:

~precedence~: takes an object and returns its precedence list, a list of classes ordered from most specific to least specific.

~methods~: takes a generic function and returns a list of all its methods.

~specializations~ : takes a method and returns a list of the specializations of the parameters. Each element of the returned list will be either a class, or a list of the form ~(eql x)~, or ~t~ (indicating that the parameter is unspecialized).

Using these functions (and not ~compute-applicable-methods~ or ~find-method~), define a function ~most-spec-app-meth~ that takes a generic function and a list of the arguments with which it has been called, and returns the most specific applicable method, if any.



** Without changing the behavior...

5.Without changing the behavior of the generic function ~area~ (Figure 11.2) in any other respect, arrange it so that a global counter gets incremented each time ~area~ is called.

** Give an example of a problem...

6.Give an example of a problem that would be difficult to solve if only the first argument to a generic function could be specialized.
