#+options: toc:nil

* exercise-12

#+toc: headlines local

** Draw three different trees that...

1.Draw three different trees that would print as ((A) (A) (A)). Write an expression that generates each.

#+begin_src lisp
  (cons (cons 'a nil) (cons (cons 'a nil) (cons (cons 'a nil) nil)))

  (make-array '(3 1) :initial-element 'a)

  (vector '(a) '(a) '(a))
#+end_src

#+RESULTS:
| A |
| A |
| A |

** Assuming make-queue,...

2.Assuming ~make-queue~, ~enqueue~, and ~dequeue~ are defined as in Figure 12.7, draw the queue in box-notation after each step:

#+begin_src lisp
  (defun make--queue () (cons nil nil))

  (defun enqueue (obj q)
    (if (null (car q))
        (setf (cdr q) (setf (car q) (list obj)))
        (setf (cdr (cdr q)) (list obj)
              (cdr q) (cdr (cdr q))))
    (car q))

  (defun dequeue (q)
    (pop (car q)))
#+end_src

#+RESULTS:
: DEQUEUE

#+begin_src lisp
  ;;> (setf q (make-queue)) ==> (NIL)
#+end_src
+---+---+
|nil|nil|
+---+---+

#+begin_src lisp
  ;;> (enqueue 'a q) ==> (A)
#+end_src
     +---+---+
     |   |   |
     +-+-+-+-+
       | +-+
       | |
     +-+-+---+
     | a |nil|
     +---+---+

#+begin_src lisp
  ;;> (enqueue 'b q) ==> (A B)
#+end_src
+---+---+
|   |   |
+-+-+-+-+
  |   |
  |   +---------+
+-+-+----+  +---+---+
| a |    +--+ b |nil|
+---+----+  +---+---+

#+begin_src lisp
  ;;> (dequeue q) ==> A
#+end_src
+---+
| a |
+---+

** Define a function ~copy-queue~ that returns a copy of a queue.

#+begin_src lisp
    (defun copy-queue (q)
      (if (null (car q))
          nil
          (list (cons (car (car q))
                      (copy-queue  (list (cdr (car q)) (cdr q))))
                (cdr q))))
#+end_src

#+RESULTS:
: COPY-QUEUE

** Define a function that...

4.Define a function that takes an object and a queue, and puts the object on the /front/ of the queue.

** Define a function that...

5.Define a function that takes an object and a queue, and (destructively) moves the first (~eql~) instance of the object to the front of the queue.

** efine a function that...

6.Define a function that takes an object and a possibly cdr-circular list, and returns true if the object is a member of the list.

** Define a function that...

7.Define a function that returns true when its argument is a cdr-circular list.

** Define a function that...

8.Define a function that returns true when its argument is a car-circular list.
