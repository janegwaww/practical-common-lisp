#+options: toc:nil

* exercise-13

#+toc: headlines local

** Test whether your compiler observes inline declarations.

#+begin_src lisp
  (declaim (inline single?))

  (defun single? (lst)
    (and (consp lst) (null (cdr lst))))

  (defun foo (x)
    (single? (bar x)))

  (macroexpand-1 'foo)
#+end_src

#+RESULTS:
: FOO

** Rewrite the following function...

2.Rewrite the following function to be tail-recursive. How much faster is it when compiled?
#+begin_src lisp
  (defun foo (x)
    (if (zerop x)
        0
        (+ 1 (foo (1- x)))))
#+end_src

#+RESULTS:
: FOO

#+begin_src lisp
  (defun new-foo (x)
    (labels ((tail (l a)
               (if (zerop l)
                   a
                   (tail (1- l) (1+ a)))))
      (tail x 0)))
  (time (new-foo 10000))
  (time (foo 10000))
#+end_src

#+RESULTS:
: NEW-FOO

** Add declarations to the following programs....

3.Add declarations to the following programs. How much faster can you make them?

a)The date arithmetic code in Section 5.7.
b)The ray-tracer in Section 9.8.

** Rewrite the breadth-first search...

4.Rewrite the breadth-first search code in Section 3.15 so that it conses as little as possible.

** Modify the binary search tree code in Section 4.7 to use pools.
