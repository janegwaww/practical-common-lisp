#+options: toc:nil

* exercises 3

#+toc: headlines local

** Show the following lists in box notation:

1) ~(a b (c d))~

   #+begin_src shell
   +-----+-----+      \ +----+----+     \ +----+-----+
   |  a  |     |-------X|  b |    |------X|    | nil |
   +-----+-----+      / +----+----+     / +--+-+-----+
                                             |
                                          +--+-+----+     \ +----+----+
                                          |  c |    +------X|  d | nil|
                                          +----+----+     / +----+----+
   #+end_src

2) ~(a (b (c (d))))~

   #+begin_src shell
   +-----+----+    \ +----+----+    \ +----+----+    \ +----+----+       +----+----+       +----+----+      +----+----+
   |  a  |    |-----X|    |nil |  +--X|  b |    |-----X|    |nil |   +---+  c |    +-------+    |nil |   +--+ d  |nil |
   +-----+----+    / +--+-+----+  | / +----+----+    / +--+-+----+   |   +----+----+       +--+-+----+   |  +----+----+
                        |         |                       |          |                        |          |
                        +---------+                       +----------+                        +----------+
   #+end_src

3) ~(((a b) c) d)~

   #+begin_src shell
   +----+----+       \ +----+----+  /     +----+----+   \ +----+----+  /    +----+----+     \  +----+----+
   |  a |    |--------X| b  |nil |-X------+    |    +----X|  c |nil |-X-----+    |    +------X |  d | nil|
   +----+----+       / +----+----+  \     +----+----+   / +----+----+  \    +----+----+     /  +----+----+
   #+end_src

4) ~(a (b . c) . d)~

   #+begin_src shell
   +----+----+     \ +---+----+
   |  a |    +------X|   |  d |
   +----+----+     / +-+-+--+-+
                       |
                       | +---+----+
                       +-+ b |  c |
                         +---+----+
   #+end_src

** Write a version of union that preserves the order of the elements in the original lists:

#+begin_src lisp
  (defun new-union (l1 l2)
    (reverse (remove-duplicates (reverse (append (copy-list l1) (copy-list l2))))))
#+end_src

#+RESULTS:
: NEW-UNION

** Define a function that takes a list and...

Define a function that takes a list and returns a list indicating the
number of times each (eql) element appears, sorted from most common
element to least common:

#+include: "../src/exercise-3-3.lisp" src lisp

#+RESULTS:
: OCCURRENCES

** Why does ~(member ' ( a ) ' ( ( a ) ( b ) ) )~ return nil?

Because two lists is different object, they allocates two pointers.

** Suppose the function ~pos+~ takes a list and...

Suppose the function pos+ takes a list and returns a list of each element
plus its position:

#+begin_src lisp
  ;;> (pos+ '( 7 5 1 4 ) )
  ;;(7 6 3 7)
#+end_src

Define this function using (a)recursion, (b)iteration, (c)mapcar.

#+include: "../src/exercise-3-5.lisp" src lisp

** After years of deliberation,...

After years of deliberation, a government commission has decided that lists should be represented by using the cdr to point to the first element and the car to point to the rest of the list. Define the government versions of the following functions:

#+include: "../src/exercise-3-6.lisp" src lisp

** Modify the program in Figure 3.6 to...

Modify the program in Figure 3.6 to use fewer cons cells. (Hint: Use dotted lists.)

#+include: "../src/exercise-3-7.lisp" src lisp

** Define a function that takes a list and prints it in dot notation:

#+begin_src lisp
  ;;> (showdots '(a b c))
  ;;(A . (B . (C . NIL)))
  ;;NIL
  (defun showdots (lst)
    (do ((str lst (cdr str)))
        ((null str) (format t "nil)"))
      (format t "(~a . " (car str))))
  (showdots '(1 2 3))
#+end_src

#+RESULTS:
: NIL

** Write a program to find the...

Write a program to find the ~longest~ finite path through a network represented as in Section 3.15. The network may contain cycles.

#+include: "../src/exercise-3-9.lisp" src lisp
