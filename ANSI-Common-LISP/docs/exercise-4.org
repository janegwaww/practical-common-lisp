#+startup: showall
#+options: toc:nil

* exercise-4

#+toc: headlines local

** Define a function to take a square array...

Define a function to take a square array (an array whose dimensions
are (n n)) and rotate it 90Â° clockwise:
#+begin_src lisp
  ;;>  (quarter-turn #2A((a b) (c d)))
  ;;#2A((C A) (D B))
#+end_src
You'll need array-dimensions (page 361).

** Read the description of reduce on page 368, then use it to define:

#+begin_src lisp
  ;; a) copy-list

  ;; b) reverse(for lists)

#+end_src

** Define a structure to represent a tree...

Define a structure to represent a tree where each node contains some
data and has up to three children. Define

#+begin_src lisp
  ;; a) a function to copy such a tree (so that no node in the copy is eql to a node in the original)

  ;; b) a function that takes an object and such a tree, and returns true if the object is eql to the data field of one of the nodes

#+end_src

** Define a function that takes a BST and...

Define a function that takes a BST and returns a list of its elements
ordered from greatest to least.

** Define ~bst-adjoin~. This function...

Define ~bst-adjoin~. This function should take the same arguments as ~bst-insert~, but should only insert the object if there is nothing ~eql~ to it in the tree.

** The contents of any hash table can be...

he contents of any hash table can be described by an assoc-list whose elements are ~(k . v)~, for each key-value pair in the hash table. Define a function that

#+begin_src lisp
  ;; (a) takes an assoc-list and returns a corresponding hash table

  ;; (b) takes a hash table and returns a corresponding assoc-list

#+end_src
