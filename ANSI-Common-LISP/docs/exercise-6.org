#+options: toc:nil

* exercise-6

#+toc: headlines local

** Define a version of tokens...

1.Define a version of ~tokens~ (page 67) that takes ~:test~ and ~:start~ arguments defaulting to ~#'constituent~ and 0 respectively.

#+begin_src lisp
  (defun constituent (c)
    (and (graphic-char-p c)
         (not (char= c #\ ))))

  (defun tokens (str &key (test #'constituent) (start 0))
    (let ((p1 (position-if test str :start start)))
      (if p1
          (let ((p2 (position-if #'(lambda (c)
                                     (not (funcall test c)))
                                 str
                                 :start p1)))
            (cons (subseq str p1 p2)
                  (if p2
                      (tokens str test p2)
                      nil)))
          nil)))
#+end_src

#+RESULTS:
: CONSTITUENT

** Define a version of ~bin-searc~...

2.Define a version of ~bin-search~ (page 60) that takes ~:key~, ~:test~, ~:start~, and ~:end~ arguments with the usual meanings and defaults.

#+begin_src lisp
  (defun bin-search
    (vec &key (key 0) (test #'finder) (start 0) (end (- (length vec) 1)))
    (funcall #'finder key vec start end))

  (defun finder (obj vec start end)
    (let ((range (- end start)))
      (if (zerop range)
          (if (eql obj (aref vec start))
              obj
              nil)
          (let ((mid (+ start (round (/ range 2)))))
            (let ((obj2 (aref vec mid)))
              (if (< obj obj2)
                  (finder (obj vec start (- mid 1))
                          (if (> obj obj2)
                              (finder obj vec (+ mid 1) end)
                              obj))))))))
#+end_src

#+RESULTS:
: FINDER

** Define a function that takes...

3.Define a function that takes any number of arguments and returns the
number of arguments passed to it.

#+begin_src lisp
  (defun num-of-args (&rest body)
    (length body))
#+end_src

#+RESULTS:
: NUM-OF-ARGS

** Modify ~most~ (page 105) to return,...

4.Modify ~most~ (page 105) to return, as two values, the two highest-scoring elements of a list.



** Define ~remove-if~ (no keywords) in terms of ~filter~ (page 105).

** Define a function that takes...

6.Define a function that takes one argument, a number, and returns the greatest argument passed to it so far.

** Define a function that takes one...

7.Define a function that takes one argument, a number, and returns true if it is greater than the argument passed to the function the last time it was called. The function should return ~nil~ the first time it is called.

** Suppose ~expensive~ is a function...

8.uppose ~expensive~ is a function of one argument, an integer between 0 and 100 inclusive, that returns the result of a time-consuming com-putation. Define a function ~frugal~ that returns the same answer, but only calls ~expensive~ when given an argument it has not seen before.

** Define a function like ~apply~,...

9.Define a function like ~apply~, but where any number printed out before
it returns will be printed, by default, in octal(base 8)
