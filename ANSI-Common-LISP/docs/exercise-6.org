#+options: toc:nil

* exercise-6

#+toc: headlines local

** Define a version of tokens...

1.Define a version of ~tokens~ (page 67) that takes ~:test~ and ~:start~ arguments defaulting to ~#'constituent~ and 0 respectively.

** Define a version of ~bin-searc~...

2.Define a version of ~bin-search~ (page 60) that takes ~:key~, ~:test~, ~:start~, and ~:end~ arguments with the usual meanings and defaults.

** Define a function that takes...

3.Define a function that takes any number of arguments and returns the
number of arguments passed to it.

** Modify ~most~ (page 105) to return,...

4.Modify ~most~ (page 105) to return, as two values, the two highest-scoring elements of a list.

** Define ~remove-if~ (no keywords) in terms of ~filter~ (page 105).

** Define a function that takes...

6.Define a function that takes one argument, a number, and returns the greatest argument passed to it so far.

** Define a function that takes one...

7.Define a function that takes one argument, a number, and returns true if it is greater than the argument passed to the function the last time it was called. The function should return ~nil~ the first time it is called.

** Suppose ~expensive~ is a function...

8.uppose ~expensive~ is a function of one argument, an integer between 0 and 100 inclusive, that returns the result of a time-consuming com-putation. Define a function ~frugal~ that returns the same answer, but only calls ~expensive~ when given an argument it has not seen before.

** Define a function like ~apply~,...

9.Define a function like ~apply~, but where any number printed out before
it returns will be printed, by default, in octal(base 8)
