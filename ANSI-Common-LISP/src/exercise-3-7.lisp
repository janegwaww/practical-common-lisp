(defun compress (x)
  (if (consp x)
      (compr (cons (car x) 1) (cdr x))
      x))

(defun compr (elt 1st)
  (if (null 1st)
      (list elt)
      (let ((next (car 1st))
            (item (car elt))
            (num (cdr elt)))
        (if (eql next item)
            (compr (cons next (+ num 1)) (cdr 1st))
            (cons (cons item num)
                  (compr (cons next 1) (cdr 1st)))))))
