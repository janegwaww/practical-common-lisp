(defun quarter-turn (arr)
  (if (arrayp arr)
      (let* ((dim (array-dimensions arr))
             (rarr (make-array dim))
             (row (- (first dim) 1))
             (col (- (second dim) 1)))
        (if (and (consp dim) (= row col))
            (do ((i 0 (+ i 1)))
                ((> i row) rarr)
              (do ((j 0 (+ j 1)))
                  ((> j col))
                (setf (aref rarr j (- row i)) (aref arr i j))))
            arr))
      arr))

(quarter-turn #2A((a b) (c d)))
